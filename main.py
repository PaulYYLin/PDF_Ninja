# Form implementation generated from reading ui file 'Ui.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtPdfWidgets import QPdfView
from PyQt6.QtPdf import QPdfDocument
from datetime import date
import PyPDF2


class Ui_MainWindow(object):     
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1039, 881)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 60, 1021, 781))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.select = QtWidgets.QPushButton(parent=self.centralwidget)
        self.select.setGeometry(QtCore.QRect(10, 10, 261, 32))
        self.select.setObjectName("select")
        
        self.pdf_view = QPdfView(self.horizontalLayoutWidget)
        self.pdf_view.setPageMode(QPdfView.PageMode.MultiPage)
        self.pdf_view.setObjectName("pdf_view")
        self.pdf = QPdfDocument(None)
        
        self.horizontalLayout.addWidget(self.pdf_view)

        self.file_path = None
        self.pass_word = None
        def open_file():
            try:
                filePath , filterType = QtWidgets.QFileDialog.getOpenFileNames(filter='PDF (*.pdf)')  # 選擇檔案對話視窗
                self.pdf.load(filePath[0])
                print(self.pdf.status())
                if self.pdf.status() == QPdfDocument.Status.Error:
                    self.pass_word = warn(0)
                    self.pdf.setPassword(self.pass_word)
                    self.pdf.load(filePath[0])
                self.pdf_view.setDocument(self.pdf)
                self.pdf_view.show()
                self.file_path = str(filePath[0])
            except:
                pass
           
            
        self.select.clicked.connect(open_file)

        
        self.convert = QtWidgets.QPushButton(parent=self.centralwidget)
        self.convert.setGeometry(QtCore.QRect(280, 10, 113, 32))
        self.convert.setObjectName("convert")
        self.text = None
        def text_extractor():
            self.text = ''
            if self.file_path != None:
                try:
                     with open(self.file_path, 'rb') as f:
                        f = PyPDF2.PdfReader(self.file_path)
                        self.text = '\n'.join([f.pages[i].extract_text() for i in range(len(f.pages))])
                except:
                    warn(4)
            else:
                warn(12)
            self.txt_view.clear()
            self.txt_view.setText(self.text)
        self.convert.clicked.connect(text_extractor)

        self.txt_view = QtWidgets.QTextBrowser(parent=self.horizontalLayoutWidget)
        self.txt_view.setObjectName("txt_view")
        self.horizontalLayout.addWidget(self.txt_view)

        
        self.export_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.export_2.setGeometry(QtCore.QRect(390, 10, 113, 32))
        self.export_2.setObjectName("export_2")
        
        def save_file():
            if self.text != None:
                save_path = QtWidgets.QFileDialog.getExistingDirectory()
                try:
                    save_path = save_path+'/'+''.join(self.file_path.split('/')[-1].split('.')[0]+f'_{date.today()}.txt')
                    print(save_path)
                    with open(save_path, 'w') as f:
                        f.write(self.text)
                    f.close()
                    warn(5)
                except:
                    warn(31)
            else:
                warn(32)

        self.export_2.clicked.connect(save_file)

        def warn(n):
            mbox = QtWidgets.QMessageBox(QtWidgets.QWidget())
            passw = QtWidgets.QInputDialog(QtWidgets.QWidget())
            
            if n==11:
                mbox.information(QtWidgets.QWidget(), 'warning', 'Wrong Data Type: Not PDF File')
            elif n == 12:
                mbox.question(QtWidgets.QWidget(), 'warning', 'No File Upload')
            elif n == 31:
                mbox.question(QtWidgets.QWidget(), 'warning', 'Wrong saving path?')
            elif n == 32:
                mbox.warning(QtWidgets.QWidget(), 'warning', 'No Translated File!')
            elif n == 4:
                mbox.critical(QtWidgets.QWidget(), 'warning', 'Something Wrong....')
            elif n == 5:
                mbox.critical(QtWidgets.QWidget(), 'information', 'Success!')
            elif n == 0:
                p, ok = passw.getText(QtWidgets.QWidget(), '','input password')
                return p

            


        MainWindow.setCentralWidget(self.centralwidget)
        self.actionDownload_Path = QtGui.QAction(parent=MainWindow)
        self.actionDownload_Path.setObjectName("actionDownload_Path")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.convert.setText(_translate("MainWindow", "Convert"))
        self.export_2.setText(_translate("MainWindow", "Export"))
        self.select.setText(_translate("MainWindow", "Select File"))
        self.actionDownload_Path.setText(_translate("MainWindow", "Download Path"))


if __name__ == "__main__":
    import sys
    
    app = QtWidgets.QApplication(sys.argv)
    pixmap = QtGui.QPixmap("icon.png")
    splash = QtWidgets.QSplashScreen(pixmap)
    splash.resize(500,500)
    splash.show()
    splash.showMessage('Running...')
    app.processEvents()
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    splash.finish(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
